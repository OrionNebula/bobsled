use std::{collections::BTreeMap, sync::Mutex};

use bobsled::{GreedyKey, Record};

#[derive(Record, Debug, Clone)]
struct TestRecord {
    #[bobsled(key)]
    pub id: u64,
    #[bobsled(key)]
    pub key: GreedyKey<String>
}

#[test]
fn derive() {
    let store = Mutex::new(BTreeMap::new());

    let record = TestRecord { id: 0, key: GreedyKey::from(String::from("Test")) };
    record.persist(&store).unwrap();

    for record in TestRecord::scan_range(&store, (0u64, GreedyKey::from(String::from("Te")))..=(0u64, GreedyKey::from(String::from("\u{ff}")))) {
        println!("{:?}", record);
    }
}
